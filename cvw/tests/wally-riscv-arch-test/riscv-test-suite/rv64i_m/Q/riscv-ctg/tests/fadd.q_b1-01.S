
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Jun 26 18:18:33 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/skulkarni/cvw/tests/wally-riscv-arch-test/riscv-test-suite/rv64i_m/Q/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/skulkarni/cvw/tests/wally-riscv-arch-test/riscv-test-suite/rv64i_m/Q/riscv-ctg/sample_cgfs/sample_cgfs_fext/RV32D/fadd.q.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fadd.q instruction of the RISC-V RV64FDQ_Zicsr extension for the fadd.q_b1 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64IFDQ_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*Q.*);def TEST_CASE_1=True;",fadd.q_b1)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==f25, rs2==f2, rd==f0,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f25; op2:f2; dest:f0; op1val:0x0; op2val:0x0; 
   valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f0, f25, f2, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rd, rs1==f3, rs2==f3, rd==f3,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f3; op2:f3; dest:f3; op1val:0x0; op2val:0x0; 
   valaddr_reg:x3; val_offset:2*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f3, f3, f3, dyn, 0, 0, x3, 2*FLEN/8, x4, x1, x2)

inst_2:
// rs2 == rd != rs1, rs1==f9, rs2==f11, rd==f11,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f9; op2:f11; dest:f11; op1val:0x0; op2val:0x1; 
   valaddr_reg:x3; val_offset:4*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f11, f9, f11, dyn, 0, 0, x3, 4*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd != rs2, rs1==f7, rs2==f22, rd==f7,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f7; op2:f22; dest:f7; op1val:0x0; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f7, f7, f22, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 != rd, rs1==f31, rs2==f31, rd==f25,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f31; op2:f31; dest:f25; op1val:0x0; op2val:0x0; 
   valaddr_reg:x3; val_offset:8*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f25, f31, f31, dyn, 0, 0, x3, 8*FLEN/8, x4, x1, x2)

inst_5:
// rs1==f29, rs2==f30, rd==f5,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f29; op2:f30; dest:f5; op1val:0x0; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:10*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f5, f29, f30, dyn, 0, 0, x3, 10*FLEN/8, x4, x1, x2)

inst_6:
// rs1==f21, rs2==f10, rd==f26,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f21; op2:f10; dest:f26; op1val:0x0; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f26, f21, f10, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_7:
// rs1==f14, rs2==f5, rd==f13,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f14; op2:f5; dest:f13; op1val:0x0; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:14*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f13, f14, f5, dyn, 0, 0, x3, 14*FLEN/8, x4, x1, x2)

inst_8:
// rs1==f28, rs2==f1, rd==f18,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0001 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f28; op2:f1; dest:f18; op1val:0x0; op2val:0x10000000000000000000000000000; 
   valaddr_reg:x3; val_offset:16*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f18, f28, f1, dyn, 0, 0, x3, 16*FLEN/8, x4, x1, x2)

inst_9:
// rs1==f16, rs2==f19, rd==f2,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0001 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f16; op2:f19; dest:f2; op1val:0x0; op2val:0x80010000000000000000000000000000; 
   valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f2, f16, f19, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_10:
// rs1==f23, rs2==f28, rd==f8,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0001 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f23; op2:f28; dest:f8; op1val:0x0; op2val:0x10000000000000000000000000002; 
   valaddr_reg:x3; val_offset:20*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f8, f23, f28, dyn, 0, 0, x3, 20*FLEN/8, x4, x1, x2)

inst_11:
// rs1==f1, rs2==f23, rd==f10,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0001 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f1; op2:f23; dest:f10; op1val:0x0; op2val:0x80010000000000000000000000000002; 
   valaddr_reg:x3; val_offset:22*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f10, f1, f23, dyn, 0, 0, x3, 22*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f4, rs2==f18, rd==f1,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x7ffe and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f4; op2:f18; dest:f1; op1val:0x0; op2val:0x7ffeffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f1, f4, f18, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f0, rs2==f12, rd==f28,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x7fff and fm2 == 0xefffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f0; op2:f12; dest:f28; op1val:0x0; op2val:0xffffefffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:26*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f28, f0, f12, dyn, 0, 0, x3, 26*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f10, rs2==f13, rd==f27,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x7fff and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f10; op2:f13; dest:f27; op1val:0x0; op2val:0x7fff0000000000000000000000000000; 
   valaddr_reg:x3; val_offset:28*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f27, f10, f13, dyn, 0, 0, x3, 28*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f22, rs2==f20, rd==f15,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x7fff and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f22; op2:f20; dest:f15; op1val:0x0; op2val:0xffff0000000000000000000000000000; 
   valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f15, f22, f20, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f19, rs2==f6, rd==f20,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x7fff and fm2 == 0x8000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f19; op2:f6; dest:f20; op1val:0x0; op2val:0x7fff8000000000000000000000000000; 
   valaddr_reg:x3; val_offset:32*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f20, f19, f6, dyn, 0, 0, x3, 32*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f5, rs2==f26, rd==f16,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x7fff and fm2 == 0x8000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f5; op2:f26; dest:f16; op1val:0x0; op2val:0xffff8000000000000000000000000000; 
   valaddr_reg:x3; val_offset:34*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f16, f5, f26, dyn, 0, 0, x3, 34*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f26, rs2==f0, rd==f19,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x7fff and fm2 == 0x8000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f26; op2:f0; dest:f19; op1val:0x0; op2val:0x7fff8000000000000000000000000001; 
   valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f19, f26, f0, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f12, rs2==f17, rd==f4,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x7fff and fm2 == 0x8000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f12; op2:f17; dest:f4; op1val:0x0; op2val:0xffff8000000000000000000000000001; 
   valaddr_reg:x3; val_offset:38*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f4, f12, f17, dyn, 0, 0, x3, 38*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f2, rs2==f15, rd==f24,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x7fff and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f2; op2:f15; dest:f24; op1val:0x0; op2val:0x7fff0000000000000000000000000001; 
   valaddr_reg:x3; val_offset:40*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f24, f2, f15, dyn, 0, 0, x3, 40*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f11, rs2==f24, rd==f30,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x7fff and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f11; op2:f24; dest:f30; op1val:0x0; op2val:0xffff0000000000000000000000000001; 
   valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f30, f11, f24, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f27, rs2==f29, rd==f6,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x3fff and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f27; op2:f29; dest:f6; op1val:0x0; op2val:0x3fff0000000000000000000000000000; 
   valaddr_reg:x3; val_offset:44*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f6, f27, f29, dyn, 0, 0, x3, 44*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f30, rs2==f27, rd==f17,fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x3fff and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f27; dest:f17; op1val:0x0; op2val:0xbfff0000000000000000000000000000; 
   valaddr_reg:x3; val_offset:46*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f17, f30, f27, dyn, 0, 0, x3, 46*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f15, rs2==f21, rd==f23,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f15; op2:f21; dest:f23; op1val:0x80000000000000000000000000000000; op2val:0x0; 
   valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f23, f15, f21, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f20, rs2==f16, rd==f12,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f20; op2:f16; dest:f12; op1val:0x80000000000000000000000000000000; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:50*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f12, f20, f16, dyn, 0, 0, x3, 50*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f6, rs2==f9, rd==f22,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f6; op2:f9; dest:f22; op1val:0x80000000000000000000000000000000; op2val:0x1; 
   valaddr_reg:x3; val_offset:52*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f22, f6, f9, dyn, 0, 0, x3, 52*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f8, rs2==f4, rd==f29,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f8; op2:f4; dest:f29; op1val:0x80000000000000000000000000000000; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f29, f8, f4, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f24, rs2==f8, rd==f9,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f24; op2:f8; dest:f9; op1val:0x80000000000000000000000000000000; op2val:0x2; 
   valaddr_reg:x3; val_offset:56*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f9, f24, f8, dyn, 0, 0, x3, 56*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f13, rs2==f7, rd==f31,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f13; op2:f7; dest:f31; op1val:0x80000000000000000000000000000000; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:58*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f13, f7, dyn, 0, 0, x3, 58*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f17, rs2==f14, rd==f21,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f17; op2:f14; dest:f21; op1val:0x80000000000000000000000000000000; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f21, f17, f14, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f18, rs2==f25, rd==f14,fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f18; op2:f25; dest:f14; op1val:0x80000000000000000000000000000000; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:62*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f14, f18, f25, dyn, 0, 0, x3, 62*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x0; 
   valaddr_reg:x3; val_offset:64*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 64*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x1; 
   valaddr_reg:x3; val_offset:68*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 68*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:70*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 70*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x2; 
   valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:74*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 74*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:76*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 76*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x1; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x0; 
   valaddr_reg:x3; val_offset:80*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 80*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:82*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 82*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x1; 
   valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:86*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 86*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x2; 
   valaddr_reg:x3; val_offset:88*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 88*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:92*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 92*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000001 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000001; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:94*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 94*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x0; 
   valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:98*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 98*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x1; 
   valaddr_reg:x3; val_offset:100*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 100*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x2; 
   valaddr_reg:x3; val_offset:104*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 104*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:106*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 106*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x2; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:110*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 110*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x0; 
   valaddr_reg:x3; val_offset:112*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 112*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x1; 
   valaddr_reg:x3; val_offset:116*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 116*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:118*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 118*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x2; 
   valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:122*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 122*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:124*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 124*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000002 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x80000000000000000000000000000002; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x0; 
   valaddr_reg:x3; val_offset:128*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 128*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:130*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 130*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x1; 
   valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:134*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 134*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x2; 
   valaddr_reg:x3; val_offset:136*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 136*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:140*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 140*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0xffffffffffffffffffffffffffff; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:142*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 142*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x0; 
   valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:146*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 146*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x1; 
   valaddr_reg:x3; val_offset:148*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 148*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x80000000000000000000000000000001; 
   valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x2; 
   valaddr_reg:x3; val_offset:152*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 152*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x80000000000000000000000000000002; 
   valaddr_reg:x3; val_offset:154*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 154*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 0 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0xffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 1 and fe1 == 0x0000 and fm1 == 0xffffffffffffffffffffffffffff and fs2 == 1 and fe2 == 0x0000 and fm2 == 0xffffffffffffffffffffffffffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x8000ffffffffffffffffffffffffffff; op2val:0x8000ffffffffffffffffffffffffffff; 
   valaddr_reg:x3; val_offset:158*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 158*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 1 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x0; op2val:0x80000000000000000000000000000000; 
   valaddr_reg:x3; val_offset:160*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 160*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x0000 and fm1 == 0x0000000000000000000000000000 and fs2 == 0 and fe2 == 0x0000 and fm2 == 0x0000000000000000000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fadd.q ; op1:f30; op2:f29; dest:f31; op1val:0x0; op2val:0x2; 
   valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn; fcsr: 0;
   correctval:??; testreg:x2 
*/
TEST_FPRR_OP(fadd.q, f31, f30, f29, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(5192296858534827628530496329220096,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325824,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(5192296858534827628530496329220098,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325826,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170135991163610696904058773219554885631,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(340282042402384805036647824275747635199,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170135991163610696904058773219554885632,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(340277174624079928635746076935438991360,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170138587312039964317873038467719495680,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(340279770772509196049560342183603601408,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170138587312039964317873038467719495681,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(340279770772509196049560342183603601409,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170135991163610696904058773219554885633,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(340277174624079928635746076935438991361,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(85065399433376081038215121361612832768,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(255206582893845312769902425077496938496,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(1,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105729,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(2,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105730,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(5192296858534827628530496329220095,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(170146375757327766559315834212213325823,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(170141183460469231731687303715884105728,128,FLEN)
NAN_BOXED(0,128,FLEN)
NAN_BOXED(2,128,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 164*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
